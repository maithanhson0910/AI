
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.spi.DirStateFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Quang
 */
public class Chose_Lesson extends javax.swing.JFrame {
    Connection con = null;
    Statement stmt = null;
    public static Vector vt_lesson, vt_author, vt_depart;
    public String[] str_1;
    
    /**
     * Creates new form Chose_Lesson
     */
    public Chose_Lesson() {
        initComponents();
        connectionSQL();
        Process_Department();
        Set_table(Show_all());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chọn bài giảng");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));

        jLabel1.setText("Tìm kiếm bài giảng theo:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chương trình học", "Tác giả" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Chương trình học:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tất cả", "Viện Công nghệ thông tin và truyền thông", "Hệ thống thông tin", "Truyền thông và mạng máy tính", "Công nghệ phần mềm", "Kỹ thuật máy tính", "Khoa học máy tính" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Bài giảng"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Tên bài giảng", "Tác giả", "Chương trình học"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
        jTable1.getColumnModel().getColumn(3).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);

        jButton1.setText("Chọn bài giảng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int x = jTable1.getSelectedRow();
        if(x==-1){
            JOptionPane jo = new JOptionPane("Thông báo");
            jo.showMessageDialog(this, "Bạn chưa chọn bài giảng");
        }else{
            Chose_lesson(x);
            Set_Chose_Lessontable();
            dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        str_1 = null;
        
        if(jComboBox1.getSelectedIndex()==0){
                Process_Department();
                str_1 = new String[vt_depart.size()+1];
                str_1[0] = "Tất cả";
                for (int i = 1; i < vt_depart.size()+1; i++) {
                    str_1[i] = ((Info_Department)vt_depart.elementAt(i-1)).name_Department;
                }
             jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(str_1));
             Set_table(Show_all());
        }
        
        if(jComboBox1.getSelectedIndex()==1){
            try {
                vt_author = new Vector();
                jLabel2.setText("Tác giả:");
                stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("Select* From Author");
                while (rs.next()) {
                    Info_Author info_Author = new Info_Author();
                    info_Author.ID_Author = Integer.valueOf(rs.getString(1));
                    info_Author.name_Author = rs.getString(2);
                    info_Author.email = rs.getString(3);
                    vt_author.add(info_Author);
                }

                str_1 = new String[vt_author.size() + 1];
                str_1[0] = "Tất cả";
                for (int i = 1; i < (vt_author.size() + 1); i++) {
                    str_1[i] = ((Info_Author) vt_author.elementAt(i - 1)).name_Author;
                }
                jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(str_1));
                Set_table(Show_all());
            } catch (SQLException ex) {
                Logger.getLogger(Chose_Lesson.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        int x = jComboBox2.getSelectedIndex();
        if(x==0){
            Set_table(Show_all());
        }else{
            
            if(jComboBox1.getSelectedIndex()==0){
                try {
                    vt_lesson = new Vector();
                    stmt = con.createStatement();
                    String str = "Select Lesson.Name_Lesson, Author.Name, Department.Name, Lesson.ID_Lesson From Lesson, Author, Department";
                    str += " Where Lesson.ID_Author = Author.ID_Author and Lesson.ID_Department = Department.ID_Department and Lesson.ID_Department="+((Info_Department)vt_depart.elementAt(x-1)).ID_Department;
                    ResultSet rs = stmt.executeQuery(str);
                    while (rs.next()) {                    
                        Info_Lesson info_Lesson = new Info_Lesson();
                        info_Lesson.name_lesson = rs.getString(1);
                        info_Lesson.name_author = rs.getString(2);
                        info_Lesson.name_depart = rs.getString(3);
                        info_Lesson.ID_lesson = Integer.valueOf(rs.getString(4));
                        vt_lesson.add(info_Lesson);
                    }
                    Object[][] oj_lesson = new Object[vt_lesson.size()][4];
                    for (int i = 0; i < vt_lesson.size(); i++) {
                    oj_lesson[i][0]= i+1;
                    oj_lesson[i][1]= ((Info_Lesson)vt_lesson.elementAt(i)).name_lesson;
                    oj_lesson[i][2]= ((Info_Lesson)vt_lesson.elementAt(i)).name_author;
                    oj_lesson[i][3]= ((Info_Lesson)vt_lesson.elementAt(i)).name_depart;
                    }
                    Set_table(oj_lesson);
                } catch (SQLException ex) {
                    Logger.getLogger(Chose_Lesson.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
             if (jComboBox1.getSelectedIndex() == 1) {
                 try {
                    vt_lesson = new Vector();
                    stmt = con.createStatement();
                    String str = "Select Lesson.Name_Lesson, Author.Name, Department.Name, Lesson.ID_Lesson From Lesson, Author, Department";
                    str += " Where Lesson.ID_Author = Author.ID_Author and Lesson.ID_Department = Department.ID_Department and Lesson.ID_Author="+((Info_Author)vt_author.elementAt(x-1)).ID_Author;
                    ResultSet rs = stmt.executeQuery(str);
                    while (rs.next()) {                    
                        Info_Lesson info_Lesson = new Info_Lesson();
                        info_Lesson.name_lesson = rs.getString(1);
                        info_Lesson.name_author = rs.getString(2);
                        info_Lesson.name_depart = rs.getString(3);
                        info_Lesson.ID_lesson = Integer.valueOf(rs.getString(4));
                        vt_lesson.add(info_Lesson);
                    }
                    Object[][] oj_lesson = new Object[vt_lesson.size()][4];
                    for (int i = 0; i < vt_lesson.size(); i++) {
                    oj_lesson[i][0]= i+1;
                    oj_lesson[i][1]= ((Info_Lesson)vt_lesson.elementAt(i)).name_lesson;
                    oj_lesson[i][2]= ((Info_Lesson)vt_lesson.elementAt(i)).name_author;
                    oj_lesson[i][3]= ((Info_Lesson)vt_lesson.elementAt(i)).name_depart;
                    }
                    Set_table(oj_lesson);
                } catch (SQLException ex) {
                    Logger.getLogger(Chose_Lesson.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chose_Lesson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chose_Lesson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chose_Lesson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chose_Lesson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Chose_Lesson().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void connectionSQL() {
        String url = "jdbc:sqlserver://localhost:1433;databaseName=Do_an;";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Danhgia_Tuvan.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            con = java.sql.DriverManager.getConnection(url, "maison", "son123456");
            System.out.println("Ket noi thanh cong");
        } catch (SQLException ex) {
            JOptionPane jo = new JOptionPane("Thông báo");
            jo.showMessageDialog(this, "Gặp lỗi kết nối CSDL");
            Logger.getLogger(Danhgia_Tuvan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void Set_table(Object[][] oj_table){
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            oj_table,
            new String [] {
                "STT", "Tên bài giảng", "Tác giả", "Chương trình học"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
            jTable1.setRowSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
        jTable1.getColumnModel().getColumn(3).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
    } 
    
    private Object[][] Show_all() {
        Object[][] oj_lesson = null;
        try {
            vt_lesson = new Vector();
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("Select Lesson.Name_Lesson, Author.Name, Department.Name, Lesson.ID_Lesson From Lesson, Author, Department Where Lesson.ID_Author = Author.ID_Author and Lesson.ID_Department = Department.ID_Department");
            while(rs.next()){
                Info_Lesson info_lesson = new Info_Lesson();
                info_lesson.name_lesson = rs.getString(1);
                info_lesson.name_author = rs.getString(2);
                info_lesson.name_depart = rs.getString(3);
                info_lesson.ID_lesson = Integer.valueOf(rs.getString(4));
                vt_lesson.add(info_lesson);
            }
            
           oj_lesson = new Object[vt_lesson.size()][4];
            for (int i = 0; i < vt_lesson.size(); i++) {
                    oj_lesson[i][0]= i+1;
                    oj_lesson[i][1]= ((Info_Lesson)vt_lesson.elementAt(i)).name_lesson;
                    oj_lesson[i][2]= ((Info_Lesson)vt_lesson.elementAt(i)).name_author;
                    oj_lesson[i][3]= ((Info_Lesson)vt_lesson.elementAt(i)).name_depart;
            }         
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Chose_Lesson.class.getName()).log(Level.SEVERE, null, ex);
        }
        return oj_lesson;
    }

    private void Process_Department(){
        try {
                    vt_depart = new Vector();
                    stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery("Select* From Department");
                    while (rs.next()) {                    
                        Info_Department info_Depart = new Info_Department();
                        info_Depart.ID_Department = Integer.valueOf(rs.getString(1));
                        info_Depart.name_Department = rs.getString(2);
                        vt_depart.add(info_Depart);
                    }
        } catch (SQLException ex) {
            Logger.getLogger(Chose_Lesson.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void Chose_lesson(int x){
        Danhgia_Tuvan.vt_rating = new Vector();
        Danhgia_Tuvan.vt_chose_lesson = new Vector();
        try {
            stmt = con.createStatement();
            String str = "Select X1,X2,X3,X4,X5,X6,X7,X8,X9 From Lesson, Rating where Lesson.ID_Lesson = Rating.ID_Lesson and Lesson.ID_Lesson=" + ((Info_Lesson) vt_lesson.elementAt(x)).ID_lesson;
            ResultSet rs = stmt.executeQuery(str);
            while (rs.next()) {
                Info_Rating info_Rating = new Info_Rating();
                info_Rating.x1 = rs.getInt(1);
                info_Rating.x2 = rs.getInt(2);
                info_Rating.x3 = rs.getInt(3);
                info_Rating.x4 = rs.getInt(4);
                info_Rating.x5 = rs.getInt(5);
                info_Rating.x6 = rs.getInt(6);
                info_Rating.x7 = rs.getInt(7);
                info_Rating.x8 = rs.getInt(8);
                info_Rating.x9 = rs.getInt(9);
                Danhgia_Tuvan.vt_rating.add(info_Rating);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Chose_Lesson.class.getName()).log(Level.SEVERE, null, ex);
        }

        Info_Lesson info_Lesson = new Info_Lesson();
        info_Lesson.ID_lesson = ((Info_Lesson) vt_lesson.elementAt(x)).ID_lesson;
        info_Lesson.name_lesson = ((Info_Lesson) vt_lesson.elementAt(x)).name_lesson;
        info_Lesson.name_author = ((Info_Lesson) vt_lesson.elementAt(x)).name_author;
        info_Lesson.name_depart = ((Info_Lesson) vt_lesson.elementAt(x)).name_depart;
        Danhgia_Tuvan.vt_chose_lesson.add(info_Lesson);
    }
    
    
    public void Set_Chose_Lessontable(){
        Object[][] oj_lesson = new Object[Danhgia_Tuvan.vt_rating.size()][11];
        for (int i = 0; i < Danhgia_Tuvan.vt_rating.size(); i++) {
            oj_lesson[i][0]= i+1;
            oj_lesson[i][1]="Chuyên gia "+(i+1);
            oj_lesson[i][2]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x1;
            oj_lesson[i][3]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x2;
            oj_lesson[i][4]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x3;
            oj_lesson[i][5]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x4;
            oj_lesson[i][6]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x5;
            oj_lesson[i][7]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x6;
            oj_lesson[i][8]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x7;
            oj_lesson[i][9]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x8;
            oj_lesson[i][10]=((Info_Rating)Danhgia_Tuvan.vt_rating.elementAt(i)).x9;
        }
        Danhgia_Tuvan.jSpinner1.setEnabled(true);
        Danhgia_Tuvan.jSpinner1.setModel(new javax.swing.SpinnerNumberModel(oj_lesson.length, oj_lesson.length, null, Integer.valueOf(1)));
        Danhgia_Tuvan.set_Table1(oj_lesson);
        Danhgia_Tuvan.jLabel7.setText(((Info_Lesson) Danhgia_Tuvan.vt_chose_lesson.elementAt(0)).name_lesson);
        Danhgia_Tuvan.jLabel9.setText(((Info_Lesson) Danhgia_Tuvan.vt_chose_lesson.elementAt(0)).name_author);
        Danhgia_Tuvan.jLabel11.setText(((Info_Lesson) Danhgia_Tuvan.vt_chose_lesson.elementAt(0)).name_depart);
    }
    
}

